name: Create release, build and upload artifacts

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*
env:
  CLICOLOR_FORCE: 1
jobs:
  create-build-upload:
    name: Build, package and publish
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        rust: [stable]
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-unknown-linux-gnu
    env:
      RUST_BACKTRACE: full
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ runner.os }}-rust-cache
      - name: Build Web UI
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: "npm install && npm run build"
        working-directory: www
      - name: Install ${{ matrix.target }} packages (ubuntu-latest)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libunwind-dev libgstreamer1.0-dev
      - name: Install ${{ matrix.target }} packages (ubuntu-latest)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo sed -i -e 's/deb-src/deb-src [arch=amd64]/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb/deb [arch=amd64]/g' /etc/apt/sources.list
          sudo apt-add-repository 'deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse'
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y curl libgstreamer1.0-dev:arm64 g++-aarch64-linux-gnu libc6-dev-arm64-cross libglib2.0-dev:arm64
      - name: Install packages (macos-latest)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gstreamer
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install Cargo Plugins
        run: cargo install sqlx-cli
      - name: Create db file
        run: "touch /tmp/data.db && cd hifirs && cargo sqlx database reset -y"
        env: 
          DATABASE_URL: "sqlite:///tmp/data.db"
      - name: Build ${{ matrix.target }}
        uses: actions-rs/cargo@v1
        env:
          SQLITE3_STATIC: true
          PKG_CONFIG_ALL_STATIC: true
          DATABASE_URL: "sqlite:///tmp/data.db"
        with:
          use-cross: true
          command: build
          args: --bin hifi-rs --release --target=${{ matrix.target }}
      - name: Tar hifi-rs-${{ matrix.target }}.tar.gz
        run: tar -cvf hifi-rs-${{ matrix.target }}.tar.gz -C ./target/${{ matrix.target }}/release/ hifi-rs
      - name: Release ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        with:
          files: hifi-rs-${{ matrix.target }}.tar.gz
